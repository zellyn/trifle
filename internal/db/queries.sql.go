// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const addAllowlistEntry = `-- name: AddAllowlistEntry :exec
INSERT INTO email_allowlist (pattern, type)
VALUES (?, ?)
`

type AddAllowlistEntryParams struct {
	Pattern string `json:"pattern"`
	Type    string `json:"type"`
}

func (q *Queries) AddAllowlistEntry(ctx context.Context, arg AddAllowlistEntryParams) error {
	_, err := q.db.ExecContext(ctx, addAllowlistEntry, arg.Pattern, arg.Type)
	return err
}

const checkEmailAllowlist = `-- name: CheckEmailAllowlist :one
SELECT COUNT(*) as count FROM email_allowlist
WHERE (type = 'email' AND pattern = ?)
   OR (type = 'domain' AND ? LIKE '%' || pattern)
`

type CheckEmailAllowlistParams struct {
	Pattern   string `json:"pattern"`
	Pattern_2 string `json:"pattern_2"`
}

func (q *Queries) CheckEmailAllowlist(ctx context.Context, arg CheckEmailAllowlistParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkEmailAllowlist, arg.Pattern, arg.Pattern_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (id, display_name)
VALUES (?, ?)
`

type CreateAccountParams struct {
	ID          string `json:"id"`
	DisplayName string `json:"display_name"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount, arg.ID, arg.DisplayName)
	return err
}

const createAccountMember = `-- name: CreateAccountMember :exec
INSERT INTO account_members (id, account_id, login_id, role)
VALUES (?, ?, ?, ?)
`

type CreateAccountMemberParams struct {
	ID        string `json:"id"`
	AccountID string `json:"account_id"`
	LoginID   string `json:"login_id"`
	Role      string `json:"role"`
}

func (q *Queries) CreateAccountMember(ctx context.Context, arg CreateAccountMemberParams) error {
	_, err := q.db.ExecContext(ctx, createAccountMember,
		arg.ID,
		arg.AccountID,
		arg.LoginID,
		arg.Role,
	)
	return err
}

const createLogin = `-- name: CreateLogin :exec
INSERT INTO logins (id, google_id, email, name)
VALUES (?, ?, ?, ?)
`

type CreateLoginParams struct {
	ID       string `json:"id"`
	GoogleID string `json:"google_id"`
	Email    string `json:"email"`
	Name     string `json:"name"`
}

func (q *Queries) CreateLogin(ctx context.Context, arg CreateLoginParams) error {
	_, err := q.db.ExecContext(ctx, createLogin,
		arg.ID,
		arg.GoogleID,
		arg.Email,
		arg.Name,
	)
	return err
}

const createTrifle = `-- name: CreateTrifle :exec
INSERT INTO trifles (id, account_id, title, description, parent_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateTrifleParams struct {
	ID          string         `json:"id"`
	AccountID   string         `json:"account_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	ParentID    sql.NullString `json:"parent_id"`
}

func (q *Queries) CreateTrifle(ctx context.Context, arg CreateTrifleParams) error {
	_, err := q.db.ExecContext(ctx, createTrifle,
		arg.ID,
		arg.AccountID,
		arg.Title,
		arg.Description,
		arg.ParentID,
	)
	return err
}

const createTrifleFile = `-- name: CreateTrifleFile :exec
INSERT INTO trifle_files (id, trifle_id, path, content)
VALUES (?, ?, ?, ?)
`

type CreateTrifleFileParams struct {
	ID       string `json:"id"`
	TrifleID string `json:"trifle_id"`
	Path     string `json:"path"`
	Content  string `json:"content"`
}

func (q *Queries) CreateTrifleFile(ctx context.Context, arg CreateTrifleFileParams) error {
	_, err := q.db.ExecContext(ctx, createTrifleFile,
		arg.ID,
		arg.TrifleID,
		arg.Path,
		arg.Content,
	)
	return err
}

const deleteAccountMember = `-- name: DeleteAccountMember :exec
DELETE FROM account_members
WHERE id = ?
`

func (q *Queries) DeleteAccountMember(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAccountMember, id)
	return err
}

const deleteAllowlistEntry = `-- name: DeleteAllowlistEntry :exec
DELETE FROM email_allowlist
WHERE id = ?
`

func (q *Queries) DeleteAllowlistEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllowlistEntry, id)
	return err
}

const deleteTrifle = `-- name: DeleteTrifle :exec
DELETE FROM trifles
WHERE id = ?
`

func (q *Queries) DeleteTrifle(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTrifle, id)
	return err
}

const deleteTrifleFile = `-- name: DeleteTrifleFile :exec
DELETE FROM trifle_files
WHERE id = ?
`

func (q *Queries) DeleteTrifleFile(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTrifleFile, id)
	return err
}

const deleteTrifleFileByPath = `-- name: DeleteTrifleFileByPath :exec
DELETE FROM trifle_files
WHERE trifle_id = ? AND path = ?
`

type DeleteTrifleFileByPathParams struct {
	TrifleID string `json:"trifle_id"`
	Path     string `json:"path"`
}

func (q *Queries) DeleteTrifleFileByPath(ctx context.Context, arg DeleteTrifleFileByPathParams) error {
	_, err := q.db.ExecContext(ctx, deleteTrifleFileByPath, arg.TrifleID, arg.Path)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, display_name, created_at, updated_at FROM accounts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByDisplayName = `-- name: GetAccountByDisplayName :one
SELECT id, display_name, created_at, updated_at FROM accounts
WHERE display_name = ? LIMIT 1
`

func (q *Queries) GetAccountByDisplayName(ctx context.Context, displayName string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByDisplayName, displayName)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountMember = `-- name: GetAccountMember :one
SELECT id, account_id, login_id, role, created_at FROM account_members
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccountMember(ctx context.Context, id string) (AccountMember, error) {
	row := q.db.QueryRowContext(ctx, getAccountMember, id)
	var i AccountMember
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.LoginID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountMemberByAccountAndLogin = `-- name: GetAccountMemberByAccountAndLogin :one
SELECT id, account_id, login_id, role, created_at FROM account_members
WHERE account_id = ? AND login_id = ?
LIMIT 1
`

type GetAccountMemberByAccountAndLoginParams struct {
	AccountID string `json:"account_id"`
	LoginID   string `json:"login_id"`
}

func (q *Queries) GetAccountMemberByAccountAndLogin(ctx context.Context, arg GetAccountMemberByAccountAndLoginParams) (AccountMember, error) {
	row := q.db.QueryRowContext(ctx, getAccountMemberByAccountAndLogin, arg.AccountID, arg.LoginID)
	var i AccountMember
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.LoginID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountMembersByAccountID = `-- name: GetAccountMembersByAccountID :many
SELECT id, account_id, login_id, role, created_at FROM account_members
WHERE account_id = ?
`

func (q *Queries) GetAccountMembersByAccountID(ctx context.Context, accountID string) ([]AccountMember, error) {
	rows, err := q.db.QueryContext(ctx, getAccountMembersByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountMember{}
	for rows.Next() {
		var i AccountMember
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.LoginID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountMembersByLoginID = `-- name: GetAccountMembersByLoginID :many
SELECT id, account_id, login_id, role, created_at FROM account_members
WHERE login_id = ?
`

func (q *Queries) GetAccountMembersByLoginID(ctx context.Context, loginID string) ([]AccountMember, error) {
	rows, err := q.db.QueryContext(ctx, getAccountMembersByLoginID, loginID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountMember{}
	for rows.Next() {
		var i AccountMember
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.LoginID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogin = `-- name: GetLogin :one
SELECT id, google_id, email, name, created_at FROM logins
WHERE id = ? LIMIT 1
`

func (q *Queries) GetLogin(ctx context.Context, id string) (Login, error) {
	row := q.db.QueryRowContext(ctx, getLogin, id)
	var i Login
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getLoginByEmail = `-- name: GetLoginByEmail :one
SELECT id, google_id, email, name, created_at FROM logins
WHERE email = ? LIMIT 1
`

func (q *Queries) GetLoginByEmail(ctx context.Context, email string) (Login, error) {
	row := q.db.QueryRowContext(ctx, getLoginByEmail, email)
	var i Login
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getLoginByGoogleID = `-- name: GetLoginByGoogleID :one
SELECT id, google_id, email, name, created_at FROM logins
WHERE google_id = ? LIMIT 1
`

func (q *Queries) GetLoginByGoogleID(ctx context.Context, googleID string) (Login, error) {
	row := q.db.QueryRowContext(ctx, getLoginByGoogleID, googleID)
	var i Login
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getTrifle = `-- name: GetTrifle :one
SELECT id, account_id, title, description, parent_id, created_at, updated_at FROM trifles
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTrifle(ctx context.Context, id string) (Trifle, error) {
	row := q.db.QueryRowContext(ctx, getTrifle, id)
	var i Trifle
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Description,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTrifleFile = `-- name: GetTrifleFile :one
SELECT id, trifle_id, path, content, created_at, updated_at FROM trifle_files
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTrifleFile(ctx context.Context, id string) (TrifleFile, error) {
	row := q.db.QueryRowContext(ctx, getTrifleFile, id)
	var i TrifleFile
	err := row.Scan(
		&i.ID,
		&i.TrifleID,
		&i.Path,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTrifleFileByPath = `-- name: GetTrifleFileByPath :one
SELECT id, trifle_id, path, content, created_at, updated_at FROM trifle_files
WHERE trifle_id = ? AND path = ?
LIMIT 1
`

type GetTrifleFileByPathParams struct {
	TrifleID string `json:"trifle_id"`
	Path     string `json:"path"`
}

func (q *Queries) GetTrifleFileByPath(ctx context.Context, arg GetTrifleFileByPathParams) (TrifleFile, error) {
	row := q.db.QueryRowContext(ctx, getTrifleFileByPath, arg.TrifleID, arg.Path)
	var i TrifleFile
	err := row.Scan(
		&i.ID,
		&i.TrifleID,
		&i.Path,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllowlistEntries = `-- name: ListAllowlistEntries :many
SELECT id, pattern, type, created_at FROM email_allowlist
ORDER BY type, pattern
`

func (q *Queries) ListAllowlistEntries(ctx context.Context) ([]EmailAllowlist, error) {
	rows, err := q.db.QueryContext(ctx, listAllowlistEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmailAllowlist{}
	for rows.Next() {
		var i EmailAllowlist
		if err := rows.Scan(
			&i.ID,
			&i.Pattern,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrifleFilesByTrifleID = `-- name: ListTrifleFilesByTrifleID :many
SELECT id, trifle_id, path, content, created_at, updated_at FROM trifle_files
WHERE trifle_id = ?
ORDER BY path
`

func (q *Queries) ListTrifleFilesByTrifleID(ctx context.Context, trifleID string) ([]TrifleFile, error) {
	rows, err := q.db.QueryContext(ctx, listTrifleFilesByTrifleID, trifleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrifleFile{}
	for rows.Next() {
		var i TrifleFile
		if err := rows.Scan(
			&i.ID,
			&i.TrifleID,
			&i.Path,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTriflesByAccountID = `-- name: ListTriflesByAccountID :many
SELECT id, account_id, title, description, parent_id, created_at, updated_at FROM trifles
WHERE account_id = ?
ORDER BY updated_at DESC
`

func (q *Queries) ListTriflesByAccountID(ctx context.Context, accountID string) ([]Trifle, error) {
	rows, err := q.db.QueryContext(ctx, listTriflesByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trifle{}
	for rows.Next() {
		var i Trifle
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Title,
			&i.Description,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountDisplayName = `-- name: UpdateAccountDisplayName :exec
UPDATE accounts
SET display_name = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateAccountDisplayNameParams struct {
	DisplayName string `json:"display_name"`
	ID          string `json:"id"`
}

func (q *Queries) UpdateAccountDisplayName(ctx context.Context, arg UpdateAccountDisplayNameParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountDisplayName, arg.DisplayName, arg.ID)
	return err
}

const updateLogin = `-- name: UpdateLogin :exec
UPDATE logins
SET email = ?, name = ?
WHERE id = ?
`

type UpdateLoginParams struct {
	Email string `json:"email"`
	Name  string `json:"name"`
	ID    string `json:"id"`
}

func (q *Queries) UpdateLogin(ctx context.Context, arg UpdateLoginParams) error {
	_, err := q.db.ExecContext(ctx, updateLogin, arg.Email, arg.Name, arg.ID)
	return err
}

const updateTrifle = `-- name: UpdateTrifle :exec
UPDATE trifles
SET title = ?, description = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateTrifleParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateTrifle(ctx context.Context, arg UpdateTrifleParams) error {
	_, err := q.db.ExecContext(ctx, updateTrifle, arg.Title, arg.Description, arg.ID)
	return err
}

const updateTrifleFile = `-- name: UpdateTrifleFile :exec
UPDATE trifle_files
SET content = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateTrifleFileParams struct {
	Content string `json:"content"`
	ID      string `json:"id"`
}

func (q *Queries) UpdateTrifleFile(ctx context.Context, arg UpdateTrifleFileParams) error {
	_, err := q.db.ExecContext(ctx, updateTrifleFile, arg.Content, arg.ID)
	return err
}

const updateTrifleFileByPath = `-- name: UpdateTrifleFileByPath :exec
UPDATE trifle_files
SET content = ?, updated_at = CURRENT_TIMESTAMP
WHERE trifle_id = ? AND path = ?
`

type UpdateTrifleFileByPathParams struct {
	Content  string `json:"content"`
	TrifleID string `json:"trifle_id"`
	Path     string `json:"path"`
}

func (q *Queries) UpdateTrifleFileByPath(ctx context.Context, arg UpdateTrifleFileByPathParams) error {
	_, err := q.db.ExecContext(ctx, updateTrifleFileByPath, arg.Content, arg.TrifleID, arg.Path)
	return err
}
